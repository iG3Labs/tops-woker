name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job - runs on all platforms
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, 1.88.0]
        exclude:
          - os: macos-latest
            rust: 1.88.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install OpenCL dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev opencl-headers pkg-config libssl-dev

      - name: Install OpenCL dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install opencl-headers pkg-config openssl

      - name: Run tests (CPU only)
        run: cargo test --features cpu-fallback

      - name: Run tests (GPU)
        if: matrix.os == 'ubuntu-latest'
        run: cargo test --features gpu

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run format check
        run: cargo fmt --all -- --check

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo audit
        run: cargo audit --deny warnings

  # Build job - creates artifacts
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin]
        include:
          - target: x86_64-unknown-linux-gnu
            os: linux
            artifact_name: tops-worker-linux-x64
          - target: x86_64-apple-darwin
            os: macos
            artifact_name: tops-worker-macos-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install OpenCL dependencies
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev opencl-headers pkg-config libssl-dev

      - name: Build CPU version
        run: cargo build --release --target ${{ matrix.target }} --features cpu-fallback

      - name: Build GPU version
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }} --features gpu

      - name: Upload CPU artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-cpu
          path: target/${{ matrix.target }}/release/tops-worker
          retention-days: 30

      - name: Upload GPU artifact
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-gpu
          path: target/${{ matrix.target }}/release/tops-worker
          retention-days: 30

  # Docker build job
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push CPU Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.cpu
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-cpu
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push GPU Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-gpu
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push verifier Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./verifier
          file: ./verifier/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-verifier
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/tops-worker-linux-x64-cpu/tops-worker
            artifacts/tops-worker-linux-x64-gpu/tops-worker
            artifacts/tops-worker-macos-x64-cpu/tops-worker
          generate_release_notes: true
          draft: false
          prerelease: false

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply, docker-compose, etc.
          echo "Staging deployment completed"

  # Performance testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install OpenCL dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev opencl-headers pkg-config libssl-dev

      - name: Build for performance testing
        run: cargo build --release --features gpu

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          # Add your performance testing logic here
          # Example: run specific benchmarks and collect metrics
          echo "Performance testing completed"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
          retention-days: 7

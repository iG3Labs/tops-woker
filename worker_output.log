warning: unused import: `Duration`
 --> src/metrics.rs:3:17
  |
3 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `HealthResponse` and `MetricsResponse`
 --> src/server.rs:4:36
  |
4 | use crate::health::{HealthChecker, HealthResponse, MetricsResponse};
  |                                    ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `crate::config::Config`
 --> src/server.rs:5:5
  |
5 | use crate::config::Config;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `get_metric_help_text`
 --> src/server.rs:6:52
  |
6 | use crate::prometheus_metrics::{PrometheusMetrics, get_metric_help_text};
  |                                                    ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/prometheus_metrics.rs:1:5
  |
1 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `k256::elliptic_curve::sec1::ToEncodedPoint`
 --> src/signing.rs:5:5
  |
5 | use k256::elliptic_curve::sec1::ToEncodedPoint;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field `ctx` is never read
  --> src/gpu.rs:11:5
   |
10 | pub struct GpuExec {
   |            ------- field in this struct
11 |     ctx: Context,
   |     ^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `tops-worker` (lib) generated 7 warnings (run `cargo fix --lib -p tops-worker` to apply 5 suggestions)
warning: unused import: `ErrorType`
  --> src/main.rs:16:33
   |
16 | use metrics::{MetricsCollector, ErrorType};
   |                                 ^^^^^^^^^

warning: function `parse_target_ms` is never used
  --> src/main.rs:22:4
   |
22 | fn parse_target_ms() -> u64 {
   |    ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `candidate_sizes` is never used
  --> src/main.rs:29:4
   |
29 | fn candidate_sizes() -> Vec<Sizes> {
   |    ^^^^^^^^^^^^^^^

warning: function `autotune_sizes` is never used
  --> src/main.rs:53:4
   |
53 | fn autotune_sizes(gpu: &GpuExec, prev_hash_bytes: &[u8;32]) -> anyhow::Resul...
   |    ^^^^^^^^^^^^^^

warning: method `next_u32` is never used
  --> src/prng.rs:13:12
   |
6  | impl DPrng {
   | ---------- method in this implementation
...
13 |     pub fn next_u32(&mut self) -> u32 { self.0.next_u32() }
   |            ^^^^^^^^

warning: field `ctx` is never read
  --> src/gpu.rs:11:5
   |
10 | pub struct GpuExec {
   |            ------- field in this struct
11 |     ctx: Context,
   |     ^^^

warning: fields `y1` and `y2_samples` are never read
 --> src/attempt.rs:7:9
  |
5 | pub struct AttemptOutput {
  |            ------------- fields in this struct
6 |     pub work_root: [u8;32],
7 |     pub y1: Vec<i8>,
  |         ^^
8 |     pub y2_samples: Vec<i8>,
  |         ^^^^^^^^^^

warning: method `get_health_check_interval` is never used
   --> src/config.rs:193:12
    |
80  | impl Config {
    | ----------- method in this implementation
...
193 |     pub fn get_health_check_interval(&self) -> Duration {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant `Validation` is never constructed
   --> src/metrics.rs:209:5
    |
205 | pub enum ErrorType {
    |          --------- variant in this enum
...
209 |     Validation,
    |     ^^^^^^^^^^
    |
    = note: `ErrorType` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `max_retries`, `retry_delay`, `backoff_multiplier`, and `max_retry_delay` are never read
  --> src/error_handling.rs:7:9
   |
6  | pub struct RetryConfig {
   |            ----------- fields in this struct
7  |     pub max_retries: u32,
   |         ^^^^^^^^^^^
8  |     pub retry_delay: Duration,
   |         ^^^^^^^^^^^
9  |     pub backoff_multiplier: f64,
   |         ^^^^^^^^^^^^^^^^^^
10 |     pub max_retry_delay: Duration,
   |         ^^^^^^^^^^^^^^^
   |
   = note: `RetryConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `failure_threshold`, `recovery_timeout`, and `state` are never read
  --> src/error_handling.rs:26:5
   |
25 | pub struct CircuitBreaker {
   |            -------------- fields in this struct
26 |     failure_threshold: u32,
   |     ^^^^^^^^^^^^^^^^^
27 |     recovery_timeout: Duration,
   |     ^^^^^^^^^^^^^^^^
28 |     state: Arc<Mutex<CircuitBreakerState>>,
   |     ^^^^^
   |
   = note: `CircuitBreaker` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `failure_count` is never read
  --> src/error_handling.rs:33:14
   |
33 |     Closed { failure_count: u32 },
   |     ------   ^^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `CircuitBreakerState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `Open` and `HalfOpen` are never constructed
  --> src/error_handling.rs:34:5
   |
32 | enum CircuitBreakerState {
   |      ------------------- variants in this enum
33 |     Closed { failure_count: u32 },
34 |     Open { opened_at: Instant },
   |     ^^^^
35 |     HalfOpen,
   |     ^^^^^^^^
   |
   = note: `CircuitBreakerState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `can_execute`, `record_success`, `record_failure`, and `get_state` are never used
  --> src/error_handling.rs:47:12
   |
38 | impl CircuitBreaker {
   | ------------------- methods in this implementation
...
47 |     pub fn can_execute(&self) -> bool {
   |            ^^^^^^^^^^^
...
61 |     pub fn record_success(&self) {
   |            ^^^^^^^^^^^^^^
...
67 |     pub fn record_failure(&self) {
   |            ^^^^^^^^^^^^^^
...
88 |     pub fn get_state(&self) -> String {
   |            ^^^^^^^^^

warning: field `circuit_breaker` is never read
   --> src/error_handling.rs:108:5
    |
106 | pub struct ErrorHandler {
    |            ------------ field in this struct
107 |     retry_config: RetryConfig,
108 |     circuit_breaker: CircuitBreaker,
    |     ^^^^^^^^^^^^^^^

warning: methods `with_circuit_breaker`, `execute_with_retry`, `handle_validation_error`, and `get_circuit_breaker_status` are never used
   --> src/error_handling.rs:126:12
    |
112 | impl ErrorHandler {
    | ----------------- methods in this implementation
...
126 |     pub fn with_circuit_breaker(mut self, failure_threshold: u32, recovery_...
    |            ^^^^^^^^^^^^^^^^^^^^
...
131 |     pub async fn execute_with_retry<F, T, E>(&self, operation: F) -> Result...
    |                  ^^^^^^^^^^^^^^^^^^
...
188 |     pub fn handle_validation_error(&self, error: &str) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
193 |     pub fn get_circuit_breaker_status(&self) -> String {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method `is_healthy` is never used
  --> src/health.rs:59:12
   |
27 | impl HealthChecker {
   | ------------------ method in this implementation
...
59 |     pub fn is_healthy(&self) -> bool {
   |            ^^^^^^^^^^

warning: fields `gpu_errors`, `network_errors`, `signature_errors`, `validation_errors`, and `network_latency_ms` are never read
  --> src/prometheus_metrics.rs:16:5
   |
9  | pub struct PrometheusMetrics {
   |            ----------------- fields in this struct
...
16 |     gpu_errors: Counter,
   |     ^^^^^^^^^^
17 |     network_errors: Counter,
   |     ^^^^^^^^^^^^^^
18 |     signature_errors: Counter,
   |     ^^^^^^^^^^^^^^^^
19 |     validation_errors: Counter,
   |     ^^^^^^^^^^^^^^^^^
...
28 |     network_latency_ms: Histogram,
   |     ^^^^^^^^^^^^^^^^^^

warning: methods `record_error`, `record_network_latency`, and `get_registry` are never used
   --> src/prometheus_metrics.rs:164:12
    |
31  | impl PrometheusMetrics {
    | ---------------------- methods in this implementation
...
164 |     pub fn record_error(&self, error_type: ErrorType) {
    |            ^^^^^^^^^^^^
...
173 |     pub fn record_network_latency(&self, latency_ms: f64) {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
183 |     pub fn get_registry(&self) -> &Registry {
    |            ^^^^^^^^^^^^

warning: function `get_metric_help_text` is never used
   --> src/prometheus_metrics.rs:189:8
    |
189 | pub fn get_metric_help_text() -> &'static str {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: `tops-worker` (bin "tops-worker") generated 26 warnings (6 duplicates) (run `cargo fix --bin "tops-worker"` to apply 1 suggestion)
    Finished `release` profile [optimized] target(s) in 0.25s
     Running `target/release/tops-worker`
[config] Loaded configuration:
  - Device DID: did:peaq:DEVICE123
  - Aggregator URL: http://localhost:8081/verify
  - Autotune target: 300ms
  - Max retries: 3
  - Rate limit: 10/s
Health server listening on port 8082
pubkey(compressed)=03bedebd53da4cdd26fa6627da566bb317789462d443cbe371b558ce0755226db4
[startup] Worker initialized successfully
[startup] Health endpoints available at http://localhost:8082
[startup] Prometheus metrics available at http://localhost:8082/prometheus
[startup] Starting main loop...
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"12c08d8ecd5cc6045373571c2985ba3b7b84daec3604c8ee1bcaae735c1328e1"}
ok nonce=1 ms=47 work_root=19b05ce3ca33428ddf01bb933957f4010579c121d5da6972e1b080142ca5f5c2
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"fd25dcfe195aae668057cb6cf1641dd6fa58e28a4493add2da91cddbeefae5d5"}
ok nonce=2 ms=28 work_root=92dea62dca84762727608a116e6e66975d380ef6990b75388fdd6a6f52445a01
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"b12a068d3938092c264a5931f464feb896b1039beca61fafdfb53bbeafa74561"}
ok nonce=3 ms=29 work_root=d5c5c06334bfa1391a05cc4f12b478963f0ddfffca667ebbbf6bf724da0b11ab
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"a83f0deb0a87566df5d177d4f57a37ef5c1cbfaff30cb1145d57bff1225c9be5"}
ok nonce=4 ms=27 work_root=03eac6019cb3a257d716f31981ffbd7664e56330eec1611d024a8b4ef1d01663
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"a1c6e4db2951ecb331e40e8da757c1e4a2b7eef00454fc982780a25be3268164"}
ok nonce=5 ms=26 work_root=68936c2b64df1943662e21fc42bc7f034ddc869885c826c30d1e82248f20fc01
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"22ef9d3e9e5c294ccc0bae005a37a6f4321d22cd84e9e815c5c2b72c29d5d73a"}
ok nonce=6 ms=166 work_root=1dc3a41998a0386019001eb18e8795832205469d74269d3d0d5df922607f9343
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"a2d7dfd856964d76f6e6357dc7dd2a94079422dc10ad5b7206b1a99796e9ff4f"}
ok nonce=7 ms=27 work_root=f0245d40d12bee05d3f05cd2d16e9aca7cbd0e776a469feab99cce69710b3f7e
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"5bd931a5fd2fab1bd4c29e2837d446638c7e0d2d09358eed2c6d8b6bdd18cee9"}
ok nonce=8 ms=27 work_root=1d7c2b4f9ca85b6cab61f0aa4635cc384032185f217fffd56b6abf5165b557de
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"474e417cc62141b3d02901522c2484e53eddf60c6f7233c8b3cacc277ad9fcd1"}
ok nonce=9 ms=234 work_root=bc06aed8c7469e7fc5522af38e2ca7ed37c2acf87b452cd911c9cc0435225c9f
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"46fd51ef8d204a1c8c7c3caa9bc080fc8d5021f06f50244a760e84e25f84b530"}
ok nonce=10 ms=53 work_root=2651e1ab94f27747db647bf223e2193d3385951feeab4de1e0b921c838e0c673
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"febddf131638193ec394107cfd18aa251ba8ff235dcce79f64d88d3e876008bd"}
ok nonce=11 ms=34 work_root=9888f3ca2ff3427fb5fb29cee98a7ecaef17308292557be2b8edc66bcdf0c51b
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"1137c11ca8d306106cec4a5cec3a4b62e619bbe4e6e819fd014009a3b8a376ef"}
ok nonce=12 ms=25 work_root=5ac71ec9d079c071aaf9e581d0bfccd1ecf2f86b0f9f9fe5d25b5893ec34ffea
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"db8093fa4eb6a7f87cc3c05269bc3a31984544cd22bc79a609c5ce83a9109517"}
ok nonce=13 ms=27 work_root=7edd9dbe3caef46da93fe38d8fff9d17c41b86c8a3b9b985d65fb088db2384d7
submit ok (http://localhost:8081/verify): {"ok":true,"sig_ok":false,"pubkey_hex":null,"digest_hex":"01ec2eb8f1bcd826a8ce3dd308c8e3cbe417642bc8281b780de22e0a21173b0e"}
ok nonce=14 ms=33 work_root=3fc2849cbd0f4d44c26e85b16d0b3eca8b47da7a7ae71050fd904a71bba6fbd3
